:root {
    --text-color: black; /* Default text color for day mode */
    --background-color: white; /* Default background color for day mode */
    /* Define other variables as needed */
    --text-web:olive;
}

body.night-mode {
    --text-color: white; /* Text color for night mode */
    --background-color: #282828; /* Background color for night mode */
    --text-web:yellowgreen;
}

main {
    background-color: var(--background-color); /* Use a CSS variable for the background */
    transition: background-color 0.3s ease; /* Smooth transition for the background color */
}

body{
    background-color: var(--background-color); /* Use a CSS variable for the background */
    transition: background-color 0.3s ease; /* Smooth transition for the background color */
}

.hero-section {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap:4rem;
    padding: 8rem 10rem;
    background-color: var(--background-color);
    transition: background-color 0.3s ease; /* Smooth transition for the background color */
    /* border:solid red; */
}

.text-section {
    width: 60%;
}

.text-section h3 {
    margin-bottom: 10px;
    color: var(--text-web);
    font-weight: bolder;
}

.text-section h1 {
    font-size: 40px;
    margin-bottom: 20px;
    color: var(--text-color);
}

.name-highlight {
    color: var(--text-color);
    /* Or any color you want */
    display: inline;
    /* Keeps the span inline */
    animation: none;
    /* If you don't want the highlight to animate separately */
}


.typing-animation {
    /* ensures that the content of the element doesn't wrap to a new line. */
    white-space: nowrap;
    /* hides any overflowed content outside the element's box, which is crucial for the typing effect. */
    overflow: hidden;
    /* Ensures the content doesn't wrap */
    border-right: .15em solid orange; /* The typewriter cursor */
    /* The typewriter cursor */
    width: 0;
    /* animates the width from 0 to 100% over 3.5 seconds in 40 steps,
     revealing the text as if it's being typed. */
     /* creates the blinking cursor effect, which starts after 3.5 seconds 
     (when the typing animation ends) and continues infinitely. */
     /* starts 4 seconds after the element is rendered (0.5s after the cursor 
     starts blinking) and animates the cursor's border color to transparent 
     over 1 second, making it disappear. */
    animation: typing 3.5s steps(40, end) forwards,
               blink-caret .75s step-end 3.5s,
               fadeOutCursor 1s 4s forwards;
}



/* Typing keyframe - Controls the typing animation.*/
@keyframes typing {
    /* starts the animation with the element's width at 0. */
    from {
        width: 0;
    }
    /* ends the animation with the element's width at 100%, revealing all the text. */
    to {
        width: 80%;
    }
}

/* Cursor animations- Controls the blink-caret (cursor blinking) animation. */
@keyframes blink-caret {
    /* sets the cursor border color to transparent at the start 
    and end of the animation cycle. */
    from, to { border-color: transparent; }
    /* sets the cursor border color to orange midway through the animation 
    cycle, creating a blinking effect. */
    50% { border-color: orange; }
}

/* Controls the fadeOutCursor animation. */
@keyframes fadeOutCursor {
    /* animates the cursor's border color to transparent, 
    effectively making the cursor disappear. */
    to { border-color: transparent; }
}


.text-section p {
    margin-bottom: 35px;
    color: var(--text-color);
    font-size: 20px; /* Adjusted for smooth scaling */
   
}



.buttons .button {
    flex: 0; /* Give the buttons equal width */
    min-width: 130px; /* Minimum width for buttons */
    padding: 10px 20px; /* Padding inside the button */
    box-sizing: border-box; /* Include padding and border in the button's size */
    white-space: nowrap; /* Prevent text from wrapping */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add ellipsis for overflow text */
    border: 2px solid black; /* Border for the button */
    border-radius: 30px; /* Rounded corners for the button */
    text-align: center; /* Center the text */
    background-color: #fff;
    color: #333;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: sans-serif;
    font-weight:bold;
}

.buttons .button:hover {
    background-color: black;
    color:#fff;
    border: none;
}

.image-section {
    width: 40%;
    position: relative;
    /* If you're using absolute positioning on the image */
    

}

.image-section img {
    transition: transform 0.3s ease; /* Smooth transition for scaling */
    width: 90%;
    /* Make the image fill the container */
    height: 80%;
    /* Maintain the aspect ratio */
    object-fit: cover;
    /* This will cover the area, could be changed to 'contain' based on your needs */
    border-radius: 25px;
    
}

.image-section:hover img {
    transform: scale(1.05); /* Zooms in the image slightly */
}

@keyframes imagefromleft {
    from {
      
        transform: translateX(-100%) rotate(0);
        opacity: 0;
        filter: blur(5px);
        border-radius: 50%;
    }
    to {
        transform: translateX(0) rotate(360deg);
        opacity: 1;
        filter: blur(0);
        border-radius: 0;
    }
}

.image-section {
    
   animation-name: imagefromleft;
   animation-duration:2s;
   animation-timing-function:ease-in;
   animation-delay:0s;
   animation-iteration-count:1;
   animation-direction:normal;
   animation-fill-mode:none;
  

}

/* breakpoint */
@media only screen and (max-width:1024px) {
    .hero-section {
      
        display:flex;
       
    }

   

    .text-section h1{
        font-size:20px;
    }

    .text-section p{
        font-size:17px;
    }

    .image-section{
        min-width:200px;
        width: calc(40% + 20px); /* Adjust the percentage and pixel values as needed */
        display:flex;
        justify-content: center;
    }

    .buttons{
       display:flex;
       gap:1rem;
    }
    
    @keyframes typing {
        /* starts the animation with the element's width at 0. */
        from {
            width: 0;
        }
        /* ends the animation with the element's width at 100%, revealing all the text. */
        to {
            width: 100%;
        }
    }

}

@media only screen and (max-width: 768px) {
    .hero-section{
      
        flex-direction: column;
        gap: 2rem 0;
    }

    .projects-section{
        flex-direction:column;
    } 

    .text-section, .project-text, .project-image {
        width: auto;
        
    }

    .text-section{
        margin-left:10%;
    }
    .text-section h1{
        font-size:25px;
    }

    .image-section{
        width: calc(60% + 15px); /* Adjust for smaller screens */
        min-width:250px;
        min-height:250px;
        display:flex;
        justify-content: center;
    }
    

  


    .buttons {
        display: flex;
        gap:2rem;
        width:100%;
        text-align: center;
    }

  

    .buttons .button {
        width: auto; /* Auto width for full-width buttons on smaller screens */
        margin: 10px 0; /* Space between stacked buttons */
        flex: none; /* Disable flexbox to allow buttons to take auto width */

    }

    @keyframes typing {
        /* starts the animation with the element's width at 0. */
        from {
            width: 0;
        }
        /* ends the animation with the element's width at 100%, revealing all the text. */
        to {
            width: 100%;
        }
    }
}
