:root {
    --text-color: black;
    /* Default text color for day mode */
    --background-color: white;
    /* Default background color for day mode */
    /* Define other variables as needed */
    --companylink-color: purple;

}

body.night-mode {
    --text-color: white;
    /* Text color for night mode */
    --background-color: #282828;
    /* Background color for night mode */
    --companylink-color: yellowgreen;
}

body {
    background-color: var(--background-color);

    /* Smooth transition for the background color */
}

.about-me {
    display: flex;
    justify-content: center;
    /* Center the content horizontally */
    align-items: center;
    /* Center the content vertically */
    gap: 2rem;
    padding: 10rem 3rem;
    /* Add some padding */
}

.content {
    width: 100%;
    height: 100%;
    max-width: 550px;
    /* Set a max-width for the text container */

}



.whoamI h2 {
    color: var(--text-color);
}

.whoamI span {
    position: relative;
}

.whoamI span::before {
    content: "Web developer";
    color: #ff7f50;
    animation: words 8s infinite;
}

.whoamI span::after {
    content: "";

    position: absolute;
    width: calc(100%+8px);
    animation: typing 3s steps(10) infinite;
}

.about-me, .footer-icons, .footer-text{
    opacity: 0; 
    transform: translateY(20px);
    transition: opacity 2s ease-in-out, transform 2s ease-in-out; /* Slower transition */
}

/* State after scrolling into view remains the same */
.visible {
    opacity: 1;
    transform: translateY(0);
}



@keyframes words {

    0%,
    20% {
        /* 2s for "web developer." including visibility and transition */
        content: "web developer.";
    }

    20%,
    40% {
        /* Pause "web developer." */
        content: "web developer.";
    }

    40%,
    60% {
        /* 2s for "freelancer." including visibility and transition */
        content: "freelancer.";
    }

    60%,
    80% {
        /* Pause "freelancer." */
        content: "freelancer.";
    }

    80%,
    100% {
        /* 2s for "PoYu Chao." including visibility and transition */
        content: "PoYu Chao.";
    }
}

@keyframes typing {

    0%,
    20% {
        width: 100%;
        /* Content is fully visible */
    }

    25%,
    45% {
        width: 0;
        /* Quick transition to hide content, preparing for next */
    }

    50%,
    70% {
        width: 100%;
        /* Next content piece is fully visible */
    }

    75%,
    95% {
        width: 0;
        /* Transition to hide, before showing next */
    }
}


.content h1 {
    color: var(--text-color);
    font-size: 3rem;
    position: relative;
    bottom: 1.2rem;

}

.content p {
    color: var(--text-color);
    font-size: 1.2rem;
    line-height: 1.6;
}

.company-link {
    color: var(--companylink-color);
}


.resume-button {
    background-color: var(--text-color);
    /* Gold color */
    transition: background-color 0.3s ease;
    /* Smooth transition for the background color */
    color: var(--background-color);
    /* Text color */
    padding: 15px 30px;
    text-decoration: none;
    border: none;
    border-radius: 30px;
    cursor: pointer;
    font-size: 1rem;
    margin-top: 2rem;
    position: relative;
    border: 2px solid black;
    /* Border for the button */
    top: 1rem;
    font-weight: bold;
    /* Pulse animation */
   
}

.resume-button:hover {
    background-color: white;
    color: black;
    transition: all 0.3s ease;
}

.profile-picture {
    width: 100%; /* The container takes the full width of its parent. */
    max-width: 560px; /* The maximum width is limited to 560px. */
    height: auto; /* Height adjusts automatically to the content, maintaining aspect ratio of images. */
    position: relative; /* Sets positioning context for absolutely positioned child elements. */
}

.profile-picture img {
    width: 100%; /* Image width stretches to fill the container width. */
    height: auto; /* Height adjusts automatically, maintaining the image's aspect ratio. */
    border-radius: 50%; /* Rounds the corners of the image to make it circular. */
}

/* creates a flip effect where the .flipper container rotates around 
its Y-axis when the .flip-container is hovered, switching from 
displaying the .front element to the .back element.  */

.flip-container {
    /* Gives a 3D effect depth when the child elements are rotated. */
    perspective: 1000px;
    width: 100%; 
    height: 100%; 
   
}

.flipper {
/* Animates the transform property over 0.6 seconds for smooth flipping. */
    transition: transform 0.6s; 
    transform-style: preserve-3d;
}

.front, .back {
    /* Both front and back sides take the full width of their parent (the flipper). */
    width: 100%; 
    /* Both sides take the full height of their parent. */
    height: 100%; 
    /* Hides the side of the element not facing the screen. */
    backface-visibility: hidden; 
    
}

.front {
    /* Initially, the front side is not rotated. */
    transform: rotateY(0deg);
    /* Ensures the front side is stacked above the back side. */
    z-index: 2;
}

.back {
    /* The back side is rotated 180 degrees around the Y-axis, 
    making it initially invisible. */
    transform: rotateY(180deg);
    /* Positioned absolutely to overlay directly on top of the front side. */
    position: absolute; 
    /* Aligns the top edge of the back side with the top of its container. */
    top: 0; 
    z-index: 1;
}


  
.flip-container:hover .flipper, .flip-container.hover .flipper {
    /* On hover, the flipper (and thus its children) is rotated 180 degrees around the Y-axis, 
    revealing the back side. */
    transform: rotateY(180deg);
  }


  @keyframes textFromLeft {
    from {
      transform: translateX(-1000px) rotateY(-30deg);
      opacity: 0;
      filter: blur(5px);
    }
    to {
      transform: translateX(0) rotateY(0deg);
      opacity: 1;
      filter: blur(0);
    }
  }
  
  .whoamI h2, .content p {
    animation: textFromLeft 2.5s ease-in-out forwards;
    transform-origin: left center; /* Ensures the rotation pivots from the left */
  }
  
  

  @keyframes imageFromRight {
    0% {
      transform: translateX(1000px) rotate(360deg);
      opacity: 0;
      filter: blur(5px);
    }
    70% {
      transform: translateX(-15px) rotate(0deg); /* Overshoot the final position slightly */
      opacity: 0.7;
    }
    100% {
      transform: translateX(0) rotate(0deg);
      opacity: 1;
      filter: blur(0);
    }
  }
  
  .front {
    animation: imageFromRight 2.5s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
  }
  

  @keyframes h1FromTop {
    from {
      transform: translateY(-1000px);
      opacity: 0;
    }
    60% {
      transform: translateY(25px); /* Move past the final position */
      opacity: 1;
    }
    100% {
      transform: translateY(0);
    }
  }
  
  .content h1 {
    animation: h1FromTop 2.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) forwards;
  }
  
  
  @keyframes buttonsFromBottom {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  .resume-button {
    animation: buttonsFromBottom 4s ease-in-out forwards;
    position: relative; /* Needed for the pseudo-elements */
  }
  
  

  
  

@media screen and (max-width:1024px) {
    .about-me {
        flex-direction: column;
        /* Stack elements vertically on smaller screens */
    }
    

    .content {
        order: 2;
        /* Ensure the text comes after the image on small screens */
    }

    .profile-picture {
        order: 1;
        /* Ensure the image comes before the text on small screens */
    }

    .content {
        display: flex;
        flex-direction: column;
        align-items: center;
        /* This will center the button horizontally */
    }
}

/* Responsive adjustments for smaller screens */
@media screen and (max-width: 768px) {
    .about-me {
        flex-direction: column;
        /* Stack elements vertically on smaller screens */
    }

    .content,
    .profile-picture {
        width: 90%;
        /* Use more of the screen for content */
        max-width: none;
        /* Remove the max-width on smaller screens */
    }

    .content {
        order: 2;
        /* Ensure the text comes after the image on small screens */
    }

    .profile-picture {
        order: 1;
        /* Ensure the image comes before the text on small screens */
    }

    /* Assuming .content is the container for .resume-button */
    .content {
        display: flex;
        flex-direction: column;
        align-items: center;
        /* This will center the button horizontally */
    }

    .resume-button {
        /* Remove any specific positioning if it was there */
        /* Ensure that width and padding are consistent with non-responsive state */
        margin-top: 15px;
        /* Add some top margin if needed */
    }
}